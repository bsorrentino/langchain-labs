{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "import dotenv from 'dotenv'\n\nconst result = dotenv.config({ path: '../.env' })"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Initialize Zod schema builder OneShot"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { ChatOpenAI } from \"langchain/chat_models/openai\";\nimport { LLMChain } from \"langchain/chains\";\nimport { BufferMemory } from \"langchain/memory\";\nimport { ChatPromptTemplate, MessagesPlaceholder } from \"langchain/prompts\";\n\nconst promptZodSchemaOneShotTemplate =`\nAs my typescript ASSISTANT expert in Zod usage,\nyou MUST create the typescript code for creating a Zod object schema following the template below:\n\n// beging template\nconst schema = z.object(\n    // here the properties of the schema\n);\n// end template\n\nand the costraints:\n\n1. NOT use required()\n2. Use nonempty() ONLY if prefix is .array()\n3. The schema must include a describe() call for each property; if omitted, you must infer it from the property name. \n        example: \n        USER: file Name - ASSISTANT: fileName.string().describe(\"the file name\")\n        USER: file Name \"path of file\" - ASSISSTANT: fileName.string().describe(\"path of file\")\n\nYou MUST start to interact to the USER following the process below\n\n1. ask for properties information\n2. generate the typescript code for the schema with follow costraints. \n3. ask to the USER to confirm the generated code\n4. if USER doesn't confirm the generated code, ask for the properties information again otherwise return typescript code \n`\n\nconst chat = new ChatOpenAI({ modelName: \"gpt-4\", temperature: 0});\nconst memory = new BufferMemory({ returnMessages: true, memoryKey: \"history\" })\n\nconst prompt = ChatPromptTemplate.fromMessages([\n  [ \"system\", promptZodSchemaOneShotTemplate], \n  new MessagesPlaceholder(\"history\"),\n  [\"human\", \"{input}\"]] )\n\nconst chain = new LLMChain({\n    llm: chat,\n    prompt: prompt,\n    memory: memory,\n  });\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "let's start "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { LLMChain } from \"langchain/chains\";\nimport { StringOutputParser } from \"langchain/schema/output_parser\";\n\ndeclare const chain: LLMChain;\n\nconst res = await chain.call({  \n    input: `properties: imagePath required as \"full image path\",  outputPath optional, codes array of string`,\n});\n\nconst parser = new StringOutputParser();\n\nconst text = await parser.parse(res.text);\nconsole.log(text);\n\nconst pres = /(const schema = z.object\\({.+}\\);)/gms.exec(text)\n\nconst schema = pres ? pres[1] : null;\n\nconsole.log(schema ?? \"not found\");\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "Here is the TypeScript code for the Zod schema based on your requirements:",
                                "",
                                "```typescript",
                                "import { z } from 'zod';",
                                "",
                                "const schema = z.object({",
                                "    imagePath: z.string().describe(\"full image path\"),",
                                "    outputPath: z.string().optional().describe(\"output path\"),",
                                "    codes: z.array(z.string()).nonempty().describe(\"array of codes\"),",
                                "});",
                                "```",
                                "",
                                "Please confirm if this is correct.",
                                "const schema = z.object({",
                                "    imagePath: z.string().describe(\"full image path\"),",
                                "    outputPath: z.string().optional().describe(\"output path\"),",
                                "    codes: z.array(z.string()).nonempty().describe(\"array of codes\"),",
                                "});",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Update schema"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { LLMChain } from \"langchain/chains\";\nimport { StringOutputParser } from \"langchain/schema/output_parser\";\ndeclare const chain: LLMChain;\n\n// const res = await chain.call({  input: \"yes, it is correct\"});\nconst res = await chain.call({  \n    input: \"No, add new property grayLevel optional as enum with values  4, 8 or 16 with default value 16\" \n});\n\nconst parser = new StringOutputParser();\n\nconst text = await parser.parse(res.text);\nconsole.log(text);\n\nconst pres = /(const schema = z.object\\({.+}\\);)/gms.exec(text)\n\nconst schema = pres ? pres[1] : null;\n\nconsole.log(schema ?? \"not found\");\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import * as z from 'zod'\n\nconst schema = z.object({\n  imagePath: z.string().required().describe(\"the image path\"),\n  outputPath: z.string().optional().describe(\"the output path\"),\n});"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}