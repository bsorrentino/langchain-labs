{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "import { OpenAI } from \"langchain/llms/openai\";\n\n\nfor (let key in process.env) { // reset AZURE environment keys\n  if( key.startsWith('AZURE')) {\n    console.log( key )\n    delete process.env[ key ] \n  }\n}\n\n\nconst model = () => {\n  try {\n    return new OpenAI({\n      openAIApiKey: process.env.OPENAI_API_KEY,\n      azureOpenAIApiKey: undefined,\n      azureOpenAIApiInstanceName: undefined,\n      azureOpenAIApiDeploymentName: undefined,\n      azureOpenAIApiVersion:undefined,\n      // modelName: \"text-davinci-003\", // Defaults to \"text-davinci-003\" if no model provided.\n      modelName: \"gpt-3.5-turbo\", \n      temperature: 0, \n      maxTokens: 500\n    });\n    \n  }\n  catch( e ) {\n    console.log( 'ERROR', e)\n  }\n  \n}\n\nexport const llm = model()\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "AZURE_OPENAI_API_BASE",
                                "AZURE_OPENAI_API_KEY",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "import { PromptTemplate } from \"langchain/prompts\";\nimport { LLMChain } from \"langchain/chains\";\n\n// Function to convert text to a conventional commit message\nasync function conventionalCommit(inputText: string): Promise<string> {\n  try {\n    // Use LangChain to generate a conventional commit message\n\n    // Create a prompt with a placeholder for the commit message\n    // The placeholder #~commit_message~# will be replaced with the actual commit message later\n    const prompt = PromptTemplate.fromTemplate( `\n    translate text provided by developer using conventional commit format following rules below\n    * if text contains a file with extension, add it as scope of the commit\n    * for each period add a newline into commit.\n    * answer must contain only the commit text\n    \n    as developer: {inputText}\n  `);\n\n  const getCommitText = new LLMChain({\n    llm: llm,\n    prompt,\n    outputKey: \"text\", // For readability - otherwise the chain output will default to a property named \"text\"\n  });\n\n    // Generate the commit message template with the placeholder\n  const result = await getCommitText.call({\n    inputText: inputText, \n  });\n\n    return result.text;\n } catch (error) {\n    console.error('Error generating the commit message:', error);\n    throw error\n  }\n}\n\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Run the CLI application\n\nconst messages = [\n    \"add note text on the vertical plane\",\n    'docs update readme.md',\n    'use switfUI view instead of UIView. relate to issue 15',\n    'package.json move to next version',\n    '\"10 - conventional_commit.nnb\" complete conventional commit implementation '\n]\n\nconst promises = messages.map( m => conventionalCommit(m))\nPromise.all( promises )\n\n\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[32m'feat: add note text on the vertical plane'\u001b[39m,",
                                "  \u001b[32m'docs(readme): update readme.md'\u001b[39m,",
                                "  \u001b[32m'feat: use SwiftUI view instead of UIView\\n\\nRelates to #15'\u001b[39m,",
                                "  \u001b[32m'chore(package.json): move to next version'\u001b[39m,",
                                "  \u001b[32m'feat(conventional_commit): complete conventional commit implementation'\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}