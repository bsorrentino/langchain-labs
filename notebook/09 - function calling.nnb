{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "Initialize [OpenAI nodejs SDK](https://www.npmjs.com/package/openai)"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "import { Configuration, OpenAIApi } from \"openai\";\n\n\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst openai = new OpenAIApi(configuration);\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "install [@azure/openai](https://www.npmjs.com/package/@azure/openai) package and initialize"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { OpenAIClient, AzureKeyCredential } from \"@azure/openai\";\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Let define a `function description` to provide function metadata to GPT"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const function_descriptions = [\n    {\n        \"name\": \"export_solution\",\n        \"description\": \"export a dataverse solution to remove environment\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"path\": {\n                    \"type\": \"string\",\n                    \"description\": \"the solution path\",\n                },\n                \"environment\": {\n                    \"type\": \"string\",\n                    \"description\": \"the target environment\",\n                },\n                \"type\": {\n                    \"type\": \"string\",\n                    \"description\": \"the solution type. The default is managed\",\n                    \"enum\": [ \"both\", \"managed\", \"unmanaged\" ]\n                },\n            },\n            \"required\": [\"path\", \"environment\"],\n        },\n    }\n];"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const user_query1 = \"let import the solution 'mysolution.zip' from path '/tmp' in environment 'bartolo' as unmanaged\"; \nconst user_query2 = \"how in javascript can iterate over an array\"; \nconst user_query3 = \"how in javascript can iterate over an array and import the solution 'mysolution.zip' from path '/tmp' in environment 'bartolo'\"; \n\ntry {\nconst chatCompletion = await openai.createChatCompletion({\n    model: \"gpt-35-turbo-0613\",\n    messages: [\n      {role: \"user\", content: user_query1}\n    ],\n    functions: function_descriptions,\n    function_call: \"auto\"\n  });\n\n  const { message, finish_reason } = chatCompletion.data.choices[0];\n\n  console.log(finish_reason, message );\n}\ncatch( e ) {\n  console.log( e )\n}"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}